{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Mid-Term Preparation","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO24VSC52WX3NiPVLbbU77A"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Gn413erC-CXZ"},"source":["# Review for Mid-Term\n","\n","* Name: Lee Chang Yoon\n","* Date: 2021.10.16\n","* Student_ID: 32183641"]},{"cell_type":"markdown","metadata":{"id":"XJC7tXLM-N8L"},"source":["## 1. Classifier and Regression\n","\n","**Objects**\n","1. We should be able to use ML first, which makes we learn ML faster.\n","2. We should be able to distinguish: \"Classification or Regression\"\n","3. Almost every algorithm could be used for classifiation and regression.\n"]},{"cell_type":"markdown","metadata":{"id":"s570Qo2K_DXB"},"source":["### Regression\n","\n","When we want to predict a continuous dependent variable from a number of independent variables, we use **Regression**.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"91nTIG4M92cC","executionInfo":{"status":"ok","timestamp":1634369962300,"user_tz":-540,"elapsed":267,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"428086c6-2cd5-4982-98e9-04ebf60a6575"},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_boston\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","\n","\n","# Load boston dataset\n","boston = load_boston()\n","\n","df = pd.DataFrame(boston.data, columns=boston.feature_names)\n","df['MEDV'] = boston.target\n","\n","\n","# Make train and test sets\n","x_train, x_test, y_train, y_test = train_test_split(df.drop(['MEDV'], axis=1), df['MEDV'],\n","                                                    test_size=0.2, random_state=2021)\n","\n","\n","# Use a regression model\n","lr = LinearRegression()\n","lr.fit(x_train, y_train)\n","y_pred = lr.predict(x_test)\n","\n","print(\"Score: {}\".format(lr.score(x_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score: 0.6352336167833779\n"]}]},{"cell_type":"markdown","metadata":{"id":"qI6DN05hAwSH"},"source":["### Classifier\n","\n","> When we want to classsifiy the given input variables to related class, we use **Classifier**."]},{"cell_type":"code","metadata":{"id":"fzcCcfE4Av5N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634369959169,"user_tz":-540,"elapsed":538,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"5aa978c2-a434-415e-a13a-aea1c9ce9664"},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","from sklearn.neural_network import MLPClassifier\n","\n","# Load breast cancer dataset\n","cancer = load_breast_cancer()\n","\n","df = pd.DataFrame(cancer.data, columns=cancer.feature_names)\n","df['class'] = cancer.target\n","\n","\n","# Make train and test sets\n","x_train, x_test, y_train, y_test = train_test_split(df.drop(['class'], axis=1), df['class'],\n","                                                    test_size=0.2, random_state=2021)\n","\n","\n","# Use a Classifier model\n","MLP = MLPClassifier()\n","MLP.fit(x_train, y_train)\n","y_pred = MLP.predict(x_test)\n","\n","print(\"Score: {}\".format(MLP.score(x_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Score: 0.9298245614035088\n"]}]},{"cell_type":"markdown","metadata":{"id":"G4fhjNThDSJl"},"source":["## 2. Linear Models"]},{"cell_type":"code","metadata":{"id":"jZYWpa80E-9i"},"source":["import pandas as pd\n","from sklearn.datasets import load_boston\n","\n","boston = load_boston()\n","\n","df = pd.DataFrame(boston.data, columns=boston.feature_names)\n","df['MEDV'] = boston.target"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"S-Q59KX3EnWZ"},"source":["#### 1. Split the df into training set and test set\n","\n","Why do we need to prepare test set?\n","> We need test set to estimate the generalization error\n","\n"]},{"cell_type":"code","metadata":{"id":"XO4ogokrDxlP"},"source":["from sklearn.model_selection import train_test_split\n","\n","x_train, x_test, y_train, y_test = train_test_split(df.drop(['MEDV'], axis=1), df['MEDV'],\n","                                                test_size=0.2, random_state=2021)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FEdgMK5LGAjV"},"source":["### 2. Train Linear Regression Model"]},{"cell_type":"code","metadata":{"id":"r7VvWhuVGFBm"},"source":["from sklearn.linear_model import LinearRegression\n","\n","lr = LinearRegression()\n","lr.fit(x_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PflxCRhRGNK1"},"source":["### 3. Make a Prediction"]},{"cell_type":"code","metadata":{"id":"k-kTVL5hGQpK"},"source":["y_pred_train = lr.predict(x_train)\n","y_pred_test = lr.predict(x_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FiLJcrNEGPzr"},"source":["### 4. Evaluate the model on the training set and test set\n","\n","Use **RMSE**\n","\n","If RMSE is 4, can we say the error of our modlel is $4?\n","\n","> RMSE is the root of mean square of the error. In short, if RMSE is 4, error is not 4."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dC39YuFnHkz5","executionInfo":{"status":"ok","timestamp":1634371563205,"user_tz":-540,"elapsed":266,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"58701b00-70a8-492f-9181-2a8ffce4ab45"},"source":["from math import sqrt\n","from sklearn.metrics import mean_squared_error\n","\n","\n","def RMSE(y, y_pred):\n","    return sqrt(mean_squared_error(y, y_pred))\n","\n","print(\"RMSE for train set: {}\".format(RMSE(y_train, y_pred_train)))\n","print(\"RMSE for test set: {}\".format(RMSE(y_test, y_pred_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE for train set: 4.674667786621305\n","RMSE for test set: 4.826999984002404\n"]}]},{"cell_type":"markdown","metadata":{"id":"yQannKuoH5rH"},"source":["### 5. Complete the equation of the linear regression model\n","\n","\\begin{align}\n","MEDV = \\beta_0 &\\ + \\beta_1*CRIM + \\beta_2*ZN + \\beta_3*INDUS + \\beta_4*CHAS \\\\\n","&+ \\beta_5*NOX + \\beta_6*RM + \\beta_7*AGE + \\beta_8*DIS + \\beta_9*RAD \\\\\n","& + \\beta_{10}*TAX + \\beta_{11}*PTRATIO + \\beta_{12}*B + \\beta_{13}*LSTAT\n","\\end{align}\n","\n","* print $ \\beta_0 $ ~ $ \\beta_{13} $ with feature(column) name"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oB8EMoD_I3P5","executionInfo":{"status":"ok","timestamp":1634371951337,"user_tz":-540,"elapsed":286,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"65e1b909-2abd-47bb-a5a4-0ec1dc584164"},"source":["print(\"beta_{} for {} : {:.4f}\".format(0, \"intercept\", lr.intercept_))\n","for i in range(0, len(df.columns) - 1):\n","    print(\"beta_{} for {} : {:.4f}\".format(i + 1, df.columns[i], lr.coef_[i]))"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["beta_0 for intercept : 35.0744\n","beta_1 for CRIM : -0.1146\n","beta_2 for ZN : 0.0532\n","beta_3 for INDUS : 0.0033\n","beta_4 for CHAS : 3.5085\n","beta_5 for NOX : -18.1357\n","beta_6 for RM : 3.8252\n","beta_7 for AGE : 0.0111\n","beta_8 for DIS : -1.5300\n","beta_9 for RAD : 0.3392\n","beta_10 for TAX : -0.0119\n","beta_11 for PTRATIO : -0.8842\n","beta_12 for B : 0.0095\n","beta_13 for LSTAT : -0.5782\n"]}]},{"cell_type":"markdown","metadata":{"id":"BGhH5VgTKQN0"},"source":["### 6. Analyz the effect of variable\n","\n","assumption1 : every other features are fixed.\n","assumption2 : use training set to anlayze.\n","\n","1. How does the 'MEDV(house price)' change when 'RM' increases by 1 ?\n","\n","2. Can 'RM' change by 1 in the data?\n","\n","3. What is the change in the 'MEDV' due to the standard deviation(std) of 'RM'\n","\n","4. What is the change in the 'MEDV' due to the maximum change of 'RM'\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tDBf5BNrKOJb","executionInfo":{"status":"ok","timestamp":1634372225813,"user_tz":-540,"elapsed":279,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"45f75dac-2a9a-456e-9bb8-9f5244aba511"},"source":["std_rm = x_train['RM'].std()\n","max_ch_rm = x_train['RM'].max() - x_train['RM'].min()\n","\n","print(\"A1: {:.3f}\".format(lr.coef_[5]))\n","print(\"A2: Yes, maximum change of 'RM' is {:.3f}\".format(max_ch_rm))\n","print(\"A3: {:.3f}\".format(lr.coef_[5] * std_rm))\n","print(\"A4: {:.3f}\".format(lr.coef_[5] * max_ch_rm))"],"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["A1: 3.825\n","A2: Yes, maximum change of 'RM' is 5.164\n","A3: 2.696\n","A4: 19.754\n"]}]},{"cell_type":"markdown","metadata":{"id":"WPxqTsYaLSer"},"source":["### 8. Anlayze the intercept\n","**assumption1 : use training set to anlayze.**\n","1. What is the expected mean value of 'MEDV' in $ when all features(x) have no effect\n","    * you can regard intercept as default value of 'MEDV' ( roughly )\n","    * be careful : in $, not in $1,000\n","2. Can all features(x) be zero in the data?\n","    * Can all features(x) have no effect?\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nDNTxVAoLZ0u","executionInfo":{"status":"ok","timestamp":1634372384176,"user_tz":-540,"elapsed":286,"user":{"displayName":"이창윤","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"07542622778981940204"}},"outputId":"91108656-5e1b-4269-fece-eeb8e400a888"},"source":["print(\"A1: The expected mean value of 'MEDV' in $ when all feature(x) have no effect is {:.3f}.\".format(lr.intercept_ * 1000))\n","print('A2: No, only 2 feature can be zero.')\n","print()\n","\n","print(x_train.min())"],"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["A1: The expected mean value of 'MEDV' in $ when all feature(x) have no effect is 35074.446.\n","A2: No, only 2 feature can be zero.\n","\n","CRIM         0.00906\n","ZN           0.00000\n","INDUS        0.46000\n","CHAS         0.00000\n","NOX          0.38500\n","RM           3.56100\n","AGE          2.90000\n","DIS          1.12960\n","RAD          1.00000\n","TAX        187.00000\n","PTRATIO     12.60000\n","B            0.32000\n","LSTAT        1.92000\n","dtype: float64\n"]}]}]}